I'm in the middle of my planned vacation in New Mexico. I recently wrote a [new feature for haikuporter emulating the style of homebrew's create command.](https://github.com/jrabbit/batisseur-planning/blob/master/haikuports-cooler/cooler.py) (It makes as much of the bep file for you as can be automated.) I've written a `haikuporter` (or later `pkgman`) wrapper to handle the achievements. It works like git-achievements you alias over the command and check the switches/commands. I've moved over some code to redis, and have gotten their development branch to build on alpha3 (Stable used to work back a few revs.). If you have ideas for achievements please file them in the [issues tracker](https://github.com/jrabbit/batisseur-planning/issues?sort=created&direction=desc&_pjax=true&state=open)

I've implemented [Gravatar](http://en.gravatar.com/) support in the points board web app, it needs to be fleshed out more from the html side, if anyone has design questions or suggestions on how to implement this HaikuPoints system with regard to existing Haiku website features let me know.

The build drone "queen" controller I've been thinking about and will use a unique identifier for build jobs to allow cross-referencing with a list of available builds. (i.e. delegating responsibility of picking a useful build up to the client.) The unique ID would be based on GCC, Haiku version (release or nightly), and git-sha or a GUID. This will also allow for the build names to reference a camlistore sha1-blob with build information and binaries. I will be investigating if [Jenkins](http://jenkins-ci.org/) is a good fit for receiving this data or if I will write a viewer for packagers to get build logs.